{"version":3,"sources":["./src/app/modules/app-state/customer/customer.service.ts","./src/app/modules/app-state/scan-domain/scan-domain.store.ts","./src/app/modules/core/core.module.ts","./src/app/modules/core/components/scan-jobs/scan-jobs.component.ts","./src/app/modules/core/components/scan-jobs/scan-jobs.component.html","./src/environments/environment.ts","./src/app/modules/core/components/customers/customers.component.ts","./src/app/modules/core/components/customers/customers.component.html","./src/app/modules/app-state/scan-domain/scan-domain.service.ts","./src/app/modules/app-state/scan-job/scan-job.query.ts","./src/app/modules/core/pages/birddog-scan-domains/birddog-scan-domains.component.html","./src/app/modules/core/pages/birddog-scan-domains/birddog-scan-domains.component.ts","./src/app/modules/core/pages/birddog-scan-host-ports/birddog-scan-host-ports.component.html","./src/app/modules/core/pages/birddog-scan-host-ports/birddog-scan-host-ports.component.ts","./src/app/modules/core/pages/birddog-scan-live/birddog-scan-live.component.html","./src/app/modules/core/pages/birddog-scan-live/birddog-scan-live.component.ts","./src/app/modules/core/home/birddog-home/birddog-home.component.html","./src/app/modules/core/home/birddog-home/birddog-home.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/modules/app-state/scan-host-port/scan-host-port.service.ts","./src/app/modules/app-state/scan-domain/scan-domain.query.ts","./src/app/modules/core/components/scan-host-ports/scan-host-ports.component.html","./src/app/modules/core/components/scan-host-ports/scan-host-ports.component.ts","./src/app/app.module.ts","./src/app/modules/core/components/scan-domains/scan-domains.component.ts","./src/app/modules/core/components/scan-domains/scan-domains.component.html","./src/app/modules/app-state/scan-host/scan-host.service.ts","./src/app/modules/core/pages/birddog-scan-hosts/birddog-scan-hosts.component.ts","./src/app/modules/core/pages/birddog-scan-hosts/birddog-scan-hosts.component.html","./src/app/modules/app-state/scan-host-port/scan-host-port.store.ts","./src/app/modules/app-state/customer/customer.query.ts","./src/app/modules/core/components/scan-hosts/scan-hosts.component.ts","./src/app/modules/core/components/scan-hosts/scan-hosts.component.html","./src/app/modules/app-state/scan-job/scan-job.store.ts","./src/app/modules/app-state/scan-job/scan-job.service.ts","./src/app/modules/core/services/birddog-ws.service.ts","./src/app/modules/core/pages/birddog-customer/birddog-customer.component.ts","./src/app/modules/core/pages/birddog-customer/birddog-customer.component.html","./src/app/modules/app-state/scan-host-port/scan-host-port.query.ts","./src/app/modules/core/pages/birddog-scan-jobs/birddog-scan-jobs.component.html","./src/app/modules/core/pages/birddog-scan-jobs/birddog-scan-jobs.component.ts","./src/app/modules/app-state/customer/customer.store.ts","./src/app/app-routing.module.ts","./src/app/modules/app-state/scan-host/scan-host.store.ts","./src/app/modules/core/services/birddog-message.service.ts","./src/app/modules/app-state/scan-host/scan-host.query.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {NgEntityService} from '@datorama/akita-ng-entity-service';\nimport {CustomerState, CustomerStore} from './customer.store';\n\n@Injectable({ providedIn: 'root' })\nexport class CustomerService extends NgEntityService<CustomerState> {\n\n  constructor(protected store: CustomerStore) {\n    super(store);\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {EntityState, EntityStore, StoreConfig} from '@datorama/akita';\nimport {ScanDomain} from './scan-domain.model';\nimport {ScanHostStore} from \"../scan-host/scan-host.store\";\n\nexport interface ScanDomainState extends EntityState<ScanDomain> {\n}\n\n@Injectable({providedIn: 'root'})\n@StoreConfig({name: 'ScanDomain'})\nexport class ScanDomainStore extends EntityStore<ScanDomainState> {\n\n  constructor(protected scanHostStore: ScanHostStore) {\n    super();\n  }\n\n  /**\n   * Clear the store\n   */\n  clear() {\n    this.remove()\n    this.scanHostStore.clear()\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BirddogCustomerComponent} from './pages/birddog-customer/birddog-customer.component';\nimport {BirddogHomeComponent} from './home/birddog-home/birddog-home.component';\nimport {ClarityModule} from \"@clr/angular\";\nimport {RouterModule} from \"@angular/router\";\nimport {BirddogScanLiveComponent} from './pages/birddog-scan-live/birddog-scan-live.component';\nimport {FormsModule} from \"@angular/forms\";\nimport {ScanJobsComponent} from './components/scan-jobs/scan-jobs.component';\nimport {ScanDomainsComponent} from './components/scan-domains/scan-domains.component';\nimport {ScanHostsComponent} from './components/scan-hosts/scan-hosts.component';\nimport {CustomersComponent} from './components/customers/customers.component';\nimport {BirddogScanJobsComponent} from './pages/birddog-scan-jobs/birddog-scan-jobs.component';\nimport {BirddogScanDomainsComponent} from './pages/birddog-scan-domains/birddog-scan-domains.component';\nimport {BirddogScanHostsComponent} from './pages/birddog-scan-hosts/birddog-scan-hosts.component';\nimport {ScanHostPortsComponent} from './components/scan-host-ports/scan-host-ports.component';\nimport {BirddogScanHostPortsComponent} from './pages/birddog-scan-host-ports/birddog-scan-host-ports.component';\nimport {NgxChartsModule} from \"@swimlane/ngx-charts\";\n\n\n@NgModule({\n  declarations: [BirddogCustomerComponent, BirddogHomeComponent, BirddogScanLiveComponent, ScanJobsComponent, ScanDomainsComponent, ScanHostsComponent, CustomersComponent, BirddogScanJobsComponent, BirddogScanDomainsComponent, BirddogScanHostsComponent, ScanHostPortsComponent, BirddogScanHostPortsComponent],\n    imports: [\n        CommonModule,\n        ClarityModule,\n        RouterModule,\n        FormsModule,\n        NgxChartsModule\n    ]\n})\nexport class CoreModule { }\n","import {Component, EventEmitter, Output} from '@angular/core';\nimport {ScanJobQuery} from \"../../../app-state/scan-job/scan-job.query\";\nimport {ScanJob} from \"../../../app-state/scan-job/scan-job.model\";\n\n@Component({\n  selector: 'app-scan-jobs',\n  templateUrl: './scan-jobs.component.html',\n  styleUrls: ['./scan-jobs.component.scss']\n})\nexport class ScanJobsComponent {\n\n  /**\n   * Trigger when a customer is selected\n   */\n  @Output()\n  onScanJobSelected: EventEmitter<ScanJob> = new EventEmitter<ScanJob>(false);\n\n  entities: ScanJob[] = []\n\n  constructor(private query: ScanJobQuery) {\n    query.selectAll().subscribe(results => {\n      this.entities = results;\n    })\n  }\n\n  /**\n   * Select a customer and navigate to the scan jobs page\n   * @param customer\n   */\n  selectScanJob(scanJob: ScanJob): void {\n    //set the active customer\n    this.query.setActive(scanJob)\n\n    //let who ever holds this component that a customer was selected\n    this.onScanJobSelected.emit(scanJob)\n  }\n}\n","<clr-datagrid>\n  <clr-dg-column>ID</clr-dg-column>\n  <clr-dg-column>Created</clr-dg-column>\n  <clr-dg-column>Status</clr-dg-column>\n  <clr-dg-column>Started</clr-dg-column>\n  <clr-dg-column>Completed</clr-dg-column>\n  <clr-dg-row *clrDgItems=\"let entity of entities\">\n    <clr-dg-cell>\n      <button class=\"btn btn-link\" (click)=\"selectScanJob(entity)\">{{entity.id}}</button>\n    </clr-dg-cell>\n    <clr-dg-cell>{{entity.created | date}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.jobStatus}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.scanStarted | date}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.scanCompleted | date}}</clr-dg-cell>\n  </clr-dg-row>\n</clr-datagrid>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Component, EventEmitter, Output} from '@angular/core';\nimport {CustomerQuery} from \"../../../app-state/customer/customer.query\";\nimport {Customer} from \"../../../app-state/customer/customer.model\";\n\n@Component({\n  selector: 'app-customers',\n  templateUrl: './customers.component.html',\n  styleUrls: ['./customers.component.scss']\n})\nexport class CustomersComponent {\n\n  /**\n   * Trigger when a customer is selected\n   */\n  @Output()\n  onCustomerSelected: EventEmitter<Customer> = new EventEmitter<Customer>(false);\n\n  entities: Customer[] = []\n\n  constructor(private query: CustomerQuery) {\n    query.selectAll().subscribe(result => {\n      this.entities = result;\n    })\n  }\n\n\n  /**\n   * Select a customer and navigate to the scan jobs page\n   * @param customer\n   */\n  selectCustomer(customer: Customer): void {\n    //set the active customer\n    this.query.setActive(customer)\n\n    //let who ever holds this component that a customer was selected\n    this.onCustomerSelected.emit(customer)\n  }\n}\n","Customers\n\n<clr-datagrid>\n  <clr-dg-column [clrDgField]=\"'name'\">Name</clr-dg-column>\n  <clr-dg-row *clrDgItems=\"let entity of entities\">\n    <clr-dg-cell>\n      <button class=\"btn btn-link\" (click)=\"selectCustomer(entity)\">{{entity.name}}</button>\n    </clr-dg-cell>\n  </clr-dg-row>\n</clr-datagrid>\n","import {Injectable} from '@angular/core';\nimport {NgEntityService} from '@datorama/akita-ng-entity-service';\nimport {ScanDomainState, ScanDomainStore} from './scan-domain.store';\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {ScanDomain} from \"./scan-domain.model\";\nimport {ScanHostStore} from \"../scan-host/scan-host.store\";\n\n@Injectable({ providedIn: 'root' })\nexport class ScanDomainService extends NgEntityService<ScanDomainState> {\n\n  constructor(protected store: ScanDomainStore, protected scanHostStore:ScanHostStore) {\n    super(store);\n  }\n\n\n  /***\n   * Populate the ScanJob store for the customerId passed in, this makes us able to query the store from anywhere in the app\n   * @param customerId\n   */\n  populateByScanJob(scanJobId: string): Observable<ScanDomain[]> {\n\n\n    //indicate we are loading\n    this.store.setLoading(true)\n\n    //remove the items from the store\n    this.store.clear()\n\n    //populate the store and return the results to be nice\n    return this.getHttp().get<ScanDomain[]>('api/entities/ScanDomain/' + scanJobId).pipe(\n      tap(entities => {\n        this.store.add(entities)\n        this.store.setLoading(false)\n      })\n    )\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {QueryEntity} from '@datorama/akita';\nimport {ScanJobState, ScanJobStore} from './scan-job.store';\nimport {ScanDomainService} from \"../scan-domain/scan-domain.service\";\nimport {ScanJob} from \"./scan-job.model\";\n\n@Injectable({providedIn: 'root'})\nexport class ScanJobQuery extends QueryEntity<ScanJobState> {\n\n  constructor(protected store: ScanJobStore, protected scanDomainService: ScanDomainService) {\n    super(store);\n  }\n\n  /***\n   * Set the active scan job\n   * @param scanJob\n   */\n  setActive(scanJob: ScanJob): void {\n    this.store.setActive(scanJob.id);\n\n    //populate the jobs for the selected customer\n    this.scanDomainService.populateByScanJob(scanJob.id).subscribe(response => {\n      console.log(\"scan domain store set to scan job = \" + scanJob.id)\n    });\n  }\n\n}\n","SCAN DOMAINS\n<clr-tabs>\n  <clr-tab>\n    <button clrTabLink>Domains</button>\n    <clr-tab-content *clrIfActive=\"true\">\n      <app-scan-domains (onScanDomainSelected)=\"onScanDomainSelected()\"></app-scan-domains>\n    </clr-tab-content>\n  </clr-tab>\n  <clr-tab>\n    <button clrTabLink>NMAPPER</button>\n    <clr-tab-content *clrIfActive>\n      <button class=\"btn btn-primary\" (click)=\"refresh()\">NMAPPER</button>\n      <clr-datagrid>\n        <clr-dg-column [clrDgField]=\"'ipAddress'\">IP</clr-dg-column>\n        <clr-dg-column [clrDgField]=\"'port.portid'\">Port</clr-dg-column>\n        <clr-dg-column [clrDgField]=\"'protocol'\">Protocol</clr-dg-column>\n        <clr-dg-column [clrDgField]=\"'port.service.name'\">Name</clr-dg-column>\n        <clr-dg-column [clrDgField]=\"'port.service.product'\">Product</clr-dg-column>\n        <clr-dg-column [clrDgField]=\"'port.service.cpe'\">CPE</clr-dg-column>\n        <clr-dg-column [clrDgField]=\"'port.service.method'\">Method</clr-dg-column>\n        <clr-dg-column [clrDgField]=\"'port.service.ostype'\">OS Type</clr-dg-column>\n        <clr-dg-row *clrDgItems=\"let entity of entities\">\n          <clr-dg-cell>\n            <button class=\"btn btn-link\">{{entity.ipAddress}}</button>\n          </clr-dg-cell>\n          <clr-dg-cell>{{entity.port.portid}}</clr-dg-cell>\n          <clr-dg-cell>{{entity.protocol}}</clr-dg-cell>\n          <clr-dg-cell>{{entity.port.service.name}}</clr-dg-cell>\n          <clr-dg-cell>{{entity.port.service.product}}</clr-dg-cell>\n          <clr-dg-cell>{{entity.port.service.cpe}}</clr-dg-cell>\n          <clr-dg-cell>{{entity.port.service.method}}</clr-dg-cell>\n          <clr-dg-cell>{{entity.port.service.ostype}}</clr-dg-cell>\n        </clr-dg-row>\n        <clr-dg-footer>\n          <clr-dg-pagination #pagination [clrDgPageSize]=\"10\">\n            <clr-dg-page-size [clrPageSizeOptions]=\"[10,20,50,100]\">Ports</clr-dg-page-size>\n            {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} users\n          </clr-dg-pagination>\n        </clr-dg-footer>\n      </clr-datagrid>\n    </clr-tab-content>\n  </clr-tab>\n</clr-tabs>\n\n\n","import {Component, HostListener} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {ScanHostPort} from \"../../../app-state/scan-host-port/scan-host-port.model\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ScanJobQuery} from \"../../../app-state/scan-job/scan-job.query\";\n\n@Component({\n  selector: 'app-birddog-scan-domains',\n  templateUrl: './birddog-scan-domains.component.html',\n  styleUrls: ['./birddog-scan-domains.component.scss']\n})\nexport class BirddogScanDomainsComponent  {\n\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(event: KeyboardEvent) {\n    this.router.navigateByUrl(\"jobs\")\n  }\n\n  entities: ScanHostPort[] = []\n\n  constructor(private router: Router,\n              private http: HttpClient,\n              private query: ScanJobQuery) {\n  }\n\n  onScanDomainSelected() {\n    this.router.navigateByUrl('hosts')\n  }\n\n  refresh(): void {\n\n    if(this.query.hasActive()){\n      this.http.get<ScanHostPort[]>('api/scan/nmap/' + this.query.getActiveId()).subscribe(result =>{\n        this.entities = result;\n      })\n    }\n  }\n}\n","SCAN HOST PORTS\n\n<div *ngIf=\"scanHost\">\n  {{scanHost.ipAddress}}\n</div>\n<app-scan-host-ports></app-scan-host-ports>\n","import {Component, HostListener, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {ScanHost} from \"../../../app-state/scan-host/scan-host.model\";\nimport {ScanHostQuery} from \"../../../app-state/scan-host/scan-host.query\";\n\n@Component({\n  selector: 'app-birddog-scan-host-ports',\n  templateUrl: './birddog-scan-host-ports.component.html',\n  styleUrls: ['./birddog-scan-host-ports.component.scss']\n})\nexport class BirddogScanHostPortsComponent implements OnInit {\n\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(event: KeyboardEvent) {\n    this.router.navigateByUrl(\"hosts\")\n  }\n\n\n  scanHost: ScanHost | null = null;\n\n  constructor(private router: Router,\n              private scanHostQuery: ScanHostQuery) {\n\n    if (scanHostQuery.hasActive()) {\n      this.scanHost = this.scanHostQuery.getActive() as ScanHost\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","<input clrInput placeholder=\"My input\" name=\"input\" [(ngModel)]=\"input\"/>\n<button class=\"btn btn-primary\" (click)=\"executeScan()\">Primary</button>\n\n<clr-datagrid>\n  <clr-dg-column>Status</clr-dg-column>\n  <clr-dg-column>Running on</clr-dg-column>\n  <clr-dg-column>Scan Type</clr-dg-column>\n  <clr-dg-column>Message</clr-dg-column>\n  <clr-dg-row *ngFor=\"let msg of messages\">\n    <clr-dg-cell>{{msg.statusDate | date}}</clr-dg-cell>\n    <clr-dg-cell>{{msg.server}}</clr-dg-cell>\n    <clr-dg-cell>{{msg.scanType}}</clr-dg-cell>\n    <clr-dg-cell>{{msg.scanMessage}}</clr-dg-cell>\n  </clr-dg-row>\n\n  <clr-dg-footer>{{messages.length}} users</clr-dg-footer>\n</clr-datagrid>\n","import {Component} from '@angular/core';\nimport {ScanWsMessage} from \"../../model/birddog-classes\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {BirddogMessageService} from \"../../services/birddog-message.service\";\n\n@Component({\n  selector: 'app-birddog-scan-live',\n  templateUrl: './birddog-scan-live.component.html',\n  styleUrls: ['./birddog-scan-live.component.scss']\n})\nexport class BirddogScanLiveComponent {\n\n  input = \"\"\n  messages: ScanWsMessage[] = []\n\n  /***\n   *\n   * @param http\n   */\n  constructor(private http: HttpClient,\n              private ms: BirddogMessageService) {\n\n    this.ms.messages.subscribe(msg => {\n      this.messages.push(msg)\n    })\n  }\n\n  /***\n   *\n   */\n  executeScan() {\n    console.log(this.input)\n    this.http.post(\"/api/scan/\", this.input).subscribe(result => {\n      console.log(result)\n    })\n  }\n}\n","<div class=\"main-container\">\n  <div class=\"alert alert-app-level\">\n  </div>\n  <header class=\"header-6\">\n    <div class=\"branding\">\n      <a routerLink=\"/\" class=\"logo-and-title\">\n        <span class=\"title\">Birddog Security</span>\n      </a>\n    </div>\n    <div class=\"header-nav\">\n      <a routerLink=\"/\" class=\"nav-link nav-text\">Home</a>\n      <a routerLink=\"/customer\" class=\"nav-link nav-text\">Customer</a>\n    </div>\n    <div class=\"header-actions\">\n      <clr-dropdown>\n        <button class=\"nav-icon\" clrDropdownTrigger aria-label=\"toggle settings menu\">\n        </button>\n        <clr-dropdown-menu *clrIfOpen clrPosition=\"bottom-right\">\n          <a routerLink=\"/about\" clrDropdownItem>About</a>\n          <a routerLink=\"/preferences\" clrDropdownItem>Preferences</a>\n          <a clrDropdownItem>Log-out</a>\n        </clr-dropdown-menu>\n      </clr-dropdown>\n    </div>\n  </header>\n  <nav class=\"subnav\">\n    <ul class=\"nav\">\n      <li class=\"nav-item\">\n        <a routerLink=\"/\" class=\"nav-link nav-text\">Scan</a>\n        <a routerLink=\"/customer\" class=\"nav-link nav-text\">Customer</a>\n        <a routerLink=\"/jobs\" class=\"nav-link nav-text\">Scan Jobs</a>\n        <a routerLink=\"/domains\" class=\"nav-link nav-text\">Domains</a>\n        <a routerLink=\"/hosts\" class=\"nav-link nav-text\">Hosts</a>\n        <a routerLink=\"/ports\" class=\"nav-link nav-text\">Ports</a>\n      </li>\n    </ul>\n  </nav>\n  <div class=\"content-container\">\n    <div class=\"content-area\">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {CustomerService} from \"../../../app-state/customer/customer.service\";\n\n@Component({\n  selector: 'app-birddog-home',\n  templateUrl: './birddog-home.component.html',\n  styleUrls: ['./birddog-home.component.scss']\n})\nexport class BirddogHomeComponent implements OnInit {\n\n  /**\n   *\n   * @param customerService\n   */\n  constructor(private customerService: CustomerService) {\n    customerService.get().subscribe();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'birddog-ui';\n}\n","<router-outlet></router-outlet>\n","import {Injectable} from '@angular/core';\nimport {NgEntityService} from '@datorama/akita-ng-entity-service';\nimport {ScanHostPortState, ScanHostPortStore} from './scan-host-port.store';\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {ScanHostPort} from \"./scan-host-port.model\";\n\n@Injectable({ providedIn: 'root' })\nexport class ScanHostPortService extends NgEntityService<ScanHostPortState> {\n\n  constructor(protected store: ScanHostPortStore) {\n    super(store);\n  }\n\n\n  /***\n   * Populate the ScanJob store for the customerId passed in, this makes us able to query the store from anywhere in the app\n   * @param customerId\n   */\n  populateByScanHostId(scanHostId: string): Observable<ScanHostPort[]> {\n\n    //indicate we are loading\n    this.store.setLoading(true)\n\n    //remove the items from the store\n    this.store.remove()\n\n    //populate the store and return the results to be nice\n    return this.getHttp().get<ScanHostPort[]>('api/entities/ScanHostPort/' + scanHostId).pipe(\n      tap(entities => {\n        this.store.add(entities)\n        this.store.setLoading(false)\n      })\n    )\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {QueryEntity} from '@datorama/akita';\nimport {ScanDomainState, ScanDomainStore} from './scan-domain.store';\nimport {ScanDomain} from \"./scan-domain.model\";\nimport {ScanHostService} from \"../scan-host/scan-host.service\";\n\n@Injectable({ providedIn: 'root' })\nexport class ScanDomainQuery extends QueryEntity<ScanDomainState> {\n\n  constructor(protected store: ScanDomainStore, protected scanHostService:ScanHostService) {\n    super(store);\n  }\n\n\n\n  /***\n   * Set the active scan job\n   * @param scanJob\n   */\n  setActive(scanDomain: ScanDomain): void {\n    this.store.setActive(scanDomain.id);\n\n    //populate the jobs for the selected customer\n    this.scanHostService.populateByScanDomain(scanDomain.id).subscribe(response => {\n      console.log(\"scan host store set to scan job = \" + scanDomain.id)\n    });\n  }\n\n}\n","<clr-datagrid>\n  <clr-dg-column [clrDgField]=\"'port.portid'\">Port</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'protocol'\">Protocol</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'port.service.name'\">Name</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'port.service.product'\">Product</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'port.service.cpe'\">CPE</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'port.service.method'\">Method</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'port.service.ostype'\">OS Type</clr-dg-column>\n  <clr-dg-row *clrDgItems=\"let entity of entities\">\n    <clr-dg-cell>\n      <button class=\"btn btn-link\">{{entity.port.portid}}</button>\n    </clr-dg-cell>\n    <clr-dg-cell>{{entity.protocol}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.port.service.name}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.port.service.product}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.port.service.cpe}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.port.service.method}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.port.service.ostype}}</clr-dg-cell>\n  </clr-dg-row>\n  <clr-dg-footer>\n    <clr-dg-pagination #pagination [clrDgPageSize]=\"10\">\n      <clr-dg-page-size [clrPageSizeOptions]=\"[10,20,50,100]\">Ports</clr-dg-page-size>\n      {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} users\n    </clr-dg-pagination>\n  </clr-dg-footer>\n</clr-datagrid>\n","import {Component} from '@angular/core';\nimport {ScanHostPort} from \"../../../app-state/scan-host-port/scan-host-port.model\";\nimport {ScanHostPortQuery} from \"../../../app-state/scan-host-port/scan-host-port.query\";\n\n@Component({\n  selector: 'app-scan-host-ports',\n  templateUrl: './scan-host-ports.component.html',\n  styleUrls: ['./scan-host-ports.component.scss']\n})\nexport class ScanHostPortsComponent {\n\n  entities: ScanHostPort[] = []\n\n  constructor(private query: ScanHostPortQuery) {\n    query.selectAll().subscribe(result => {\n      this.entities=result\n    })\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {ClarityModule} from '@clr/angular';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {CoreModule} from \"./modules/core/core.module\";\nimport {HttpClientModule} from \"@angular/common/http\";\nimport {NG_ENTITY_SERVICE_CONFIG} from '@datorama/akita-ng-entity-service';\nimport {AkitaNgDevtools} from '@datorama/akita-ngdevtools';\nimport {AkitaNgRouterStoreModule} from '@datorama/akita-ng-router-store';\nimport {environment} from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ClarityModule,\n    BrowserAnimationsModule,\n    CoreModule,\n    HttpClientModule,\n    environment.production ? [] : AkitaNgDevtools.forRoot(),\n    AkitaNgRouterStoreModule\n  ],\n  providers: [{ provide: NG_ENTITY_SERVICE_CONFIG, useValue: { baseUrl: 'api/entities' }}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Component, EventEmitter, Output} from '@angular/core';\nimport {ScanDomain} from \"../../../app-state/scan-domain/scan-domain.model\";\nimport {ScanDomainQuery} from \"../../../app-state/scan-domain/scan-domain.query\";\n\n@Component({\n  selector: 'app-scan-domains',\n  templateUrl: './scan-domains.component.html',\n  styleUrls: ['./scan-domains.component.scss']\n})\nexport class ScanDomainsComponent  {\n\n  @Output()\n  onScanDomainSelected: EventEmitter<ScanDomain> = new EventEmitter<ScanDomain>(false);\n\n  entities: ScanDomain[] = []\n\n  constructor(private query: ScanDomainQuery) {\n    query.selectAll().subscribe(result => {\n      this.entities = result;\n    })\n  }\n\n\n  /**\n   *\n   * @param scanDomain\n   */\n  selectScanDomain(scanDomain: ScanDomain): void {\n    //set the active customer\n    this.query.setActive(scanDomain)\n\n    //let who ever holds this component that a customer was selected\n    this.onScanDomainSelected.emit(scanDomain)\n  }\n\n}\n","<clr-datagrid>\n  <clr-dg-column [clrDgField]=\"'dnsName'\">DNS Name</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'created'\">Created</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'status'\">Status</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'portsFounds'\">Ports Found</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'discoverySource'\">Source</clr-dg-column>\n  <clr-dg-row *clrDgItems=\"let entity of entities\">\n    <clr-dg-cell>\n      <button class=\"btn btn-link\" (click)=\"selectScanDomain(entity)\">{{entity.dnsName}}</button>\n    </clr-dg-cell>\n    <clr-dg-cell>{{entity.created | date}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.status}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.portsFounds}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.discoverySource}}</clr-dg-cell>\n  </clr-dg-row>\n  <clr-dg-footer>\n    <clr-dg-pagination #pagination [clrDgPageSize]=\"10\">\n      <clr-dg-page-size [clrPageSizeOptions]=\"[10,20,50,100]\">Domains</clr-dg-page-size>\n      {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} users\n    </clr-dg-pagination>\n  </clr-dg-footer>\n</clr-datagrid>\n","import {Injectable} from '@angular/core';\nimport {NgEntityService} from '@datorama/akita-ng-entity-service';\nimport {ScanHostState, ScanHostStore} from './scan-host.store';\nimport {Observable} from \"rxjs\";\nimport {tap} from \"rxjs/operators\";\nimport {ScanHost} from \"./scan-host.model\";\n\n@Injectable({providedIn: 'root'})\nexport class ScanHostService extends NgEntityService<ScanHostState> {\n\n  constructor(protected store: ScanHostStore) {\n    super(store);\n  }\n\n\n  /***\n   * Populate the ScanJob store for the customerId passed in, this makes us able to query the store from anywhere in the app\n   * @param customerId\n   */\n  populateByScanDomain(scanDomainId: string): Observable<ScanHost[]> {\n\n\n    //indicate we are loading\n    this.store.setLoading(true)\n\n    //remove the items from the store\n    this.store.remove()\n\n    //populate the store and return the results to be nice\n    return this.getHttp().get<ScanHost[]>('api/entities/ScanHost/' + scanDomainId).pipe(\n      tap(entities => {\n        this.store.add(entities)\n        this.store.setLoading(false)\n      })\n    )\n  }\n}\n","import {Component, HostListener, OnInit} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-birddog-scan-hosts',\n  templateUrl: './birddog-scan-hosts.component.html',\n  styleUrls: ['./birddog-scan-hosts.component.scss']\n})\nexport class BirddogScanHostsComponent implements OnInit {\n\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(event: KeyboardEvent) {\n    this.router.navigateByUrl(\"domains\")\n  }\n\n  constructor(private router:Router) { }\n\n  ngOnInit(): void {\n  }\n\n  onScanHostSelected() {\n    this.router.navigateByUrl('ports')\n  }\n}\n","SCAN HOSTS\n<app-scan-hosts (onScanHostSelected)=\"onScanHostSelected()\"></app-scan-hosts>\n","import {Injectable} from '@angular/core';\nimport {EntityState, EntityStore, StoreConfig} from '@datorama/akita';\nimport {ScanHostPort} from './scan-host-port.model';\n\nexport interface ScanHostPortState extends EntityState<ScanHostPort> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'ScanHostPort' })\nexport class ScanHostPortStore extends EntityStore<ScanHostPortState> {\n\n  constructor() {\n    super();\n  }\n\n  clear() {\n    this.remove()\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {QueryEntity} from '@datorama/akita';\nimport {CustomerState, CustomerStore} from './customer.store';\nimport {Customer} from \"./customer.model\";\nimport {ScanJobService} from \"../scan-job/scan-job.service\";\n\n@Injectable({providedIn: 'root'})\nexport class CustomerQuery extends QueryEntity<CustomerState> {\n\n  constructor(protected store: CustomerStore, protected scanJobService: ScanJobService) {\n    super(store);\n  }\n\n  setActive(customer: Customer): void {\n    this.store.setActive(customer.id);\n\n\n    //populate the jobs for the selected customer\n    this.scanJobService.populateByCustomerId(customer.id).subscribe(response => {\n      console.log(\"scan job store set to customer = \" + customer.id)\n    });\n  }\n\n}\n","import {Component, EventEmitter, Output} from '@angular/core';\nimport {ScanHost} from \"../../../app-state/scan-host/scan-host.model\";\nimport {ScanHostQuery} from \"../../../app-state/scan-host/scan-host.query\";\n\n@Component({\n  selector: 'app-scan-hosts',\n  templateUrl: './scan-hosts.component.html',\n  styleUrls: ['./scan-hosts.component.scss']\n})\nexport class ScanHostsComponent {\n\n  @Output()\n  onScanHostSelected: EventEmitter<ScanHost> = new EventEmitter<ScanHost>(false);\n\n  entities: ScanHost[] = []\n\n  constructor(private query: ScanHostQuery) {\n    query.selectAll().subscribe(results => {\n      this.entities = results;\n    })\n  }\n\n  /**\n   *\n   * @param scanDomain\n   */\n  selectScanDomain(scanHost: ScanHost): void {\n    //set the active customer\n    this.query.setActive(scanHost)\n\n    //let who ever holds this component that a customer was selected\n    this.onScanHostSelected.emit(scanHost)\n  }\n}\n","<clr-datagrid>\n  <clr-dg-column [clrDgField]=\"'ipAddress'\">IP Address</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'portsFound'\">Open Ports</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'created'\">Created</clr-dg-column>\n  <clr-dg-column [clrDgField]=\"'status'\">Status</clr-dg-column>\n  <clr-dg-row  *clrDgItems=\"let entity of entities\">\n    <clr-dg-cell>\n      <button class=\"btn btn-link\" (click)=\"selectScanDomain(entity)\">{{entity.ipAddress}}</button>\n    </clr-dg-cell>\n    <clr-dg-cell>{{entity.portsFound}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.created | date}}</clr-dg-cell>\n    <clr-dg-cell>{{entity.status}}</clr-dg-cell>\n  </clr-dg-row>\n  <clr-dg-footer>\n    <clr-dg-pagination #pagination [clrDgPageSize]=\"10\">\n      <clr-dg-page-size [clrPageSizeOptions]=\"[10,20,50,100]\">Domains</clr-dg-page-size>\n      {{pagination.firstItem + 1}} - {{pagination.lastItem + 1}} of {{pagination.totalItems}} users\n    </clr-dg-pagination>\n  </clr-dg-footer>\n</clr-datagrid>\n","import {Injectable} from '@angular/core';\nimport {EntityState, EntityStore, StoreConfig} from '@datorama/akita';\nimport {ScanJob} from './scan-job.model';\n\nexport interface ScanJobState extends EntityState<ScanJob> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'ScanJob' })\nexport class ScanJobStore extends EntityStore<ScanJobState> {\n\n  constructor() {\n    super();\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {NgEntityService} from '@datorama/akita-ng-entity-service';\nimport {ScanJobState, ScanJobStore} from './scan-job.store';\nimport {Observable} from \"rxjs\";\nimport {ScanJob} from \"./scan-job.model\";\nimport {tap} from \"rxjs/operators\";\n\n@Injectable({providedIn: 'root'})\nexport class ScanJobService extends NgEntityService<ScanJobState> {\n\n  constructor(protected store: ScanJobStore) {\n    super(store);\n  }\n\n\n  /***\n   * Populate the ScanJob store for the customerId passed in, this makes us able to query the store from anywhere in the app\n   * @param customerId\n   */\n  populateByCustomerId(customerId: string): Observable<ScanJob[]> {\n\n\n    //indicate we are loading\n    this.store.setLoading(true)\n\n    //remove the items from the store\n    this.store.remove()\n\n    //populate the store and return the results to be nice\n    return this.getHttp().get<ScanJob[]>('api/entities/ScanJob/' + customerId).pipe(\n      tap(entities => {\n        this.store.add(entities)\n        this.store.setLoading(false)\n      })\n    )\n  }\n\n}\n","import {Injectable} from '@angular/core';\n\nimport {Observable, Observer, Subject} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BirddogWsService {\n\n  private subject: Subject<MessageEvent> | undefined\n\n  /***\n   * Connect to the bird dog web socket\n   * @param url\n   */\n  public connect(url: string): Subject<MessageEvent> {\n    if (!this.subject) {\n      this.subject = this.create(url)\n    }\n\n    return this.subject\n  }\n\n  /**\n   *\n   * @param url\n   * @private\n   */\n  private create(url: string): Subject<MessageEvent> {\n    const ws = new WebSocket(url)\n\n    const observable = Observable.create((obs: Observer<MessageEvent>) => {\n      ws.onmessage = obs.next.bind(obs)\n      ws.onerror = obs.error.bind(obs)\n      ws.onclose = obs.complete.bind(obs)\n      return ws.close.bind(ws)\n    });\n\n    const observer = {\n      next: (data: any) => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify(data))\n        }\n      }\n    }\n\n    return Subject.create(observer, observable)\n  }\n}\n","import {Component} from '@angular/core';\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-birddog-customer',\n  templateUrl: './birddog-customer.component.html',\n  styleUrls: ['./birddog-customer.component.scss']\n})\nexport class BirddogCustomerComponent {\n\n\n  constructor(private router: Router) {\n  }\n\n  /**\n   * Display the jobs for the customer\n   */\n  onCustomerSelected(): void {\n    this.router.navigateByUrl('jobs')\n  }\n}\n","CUSTOMERS\n<app-customers (onCustomerSelected)=\"onCustomerSelected()\"></app-customers>\n","import {Injectable} from '@angular/core';\nimport {QueryEntity} from '@datorama/akita';\nimport {ScanHostPortState, ScanHostPortStore} from './scan-host-port.store';\n\n@Injectable({ providedIn: 'root' })\nexport class ScanHostPortQuery extends QueryEntity<ScanHostPortState> {\n\n  constructor(protected store: ScanHostPortStore) {\n    super(store);\n  }\n\n}\n","SCAN JOBS\n<button class=\"btn btn-primary\" (click)=\"executeScanJob()\">Submit Scan</button>\n\n<clr-tabs>\n  <clr-tab>\n    <button clrTabLink>Scan Jobs</button>\n    <clr-tab-content *clrIfActive=\"true\">\n      <app-scan-jobs (onScanJobSelected)=\"onScanJobSelected()\"></app-scan-jobs>\n    </clr-tab-content>\n  </clr-tab>\n  <clr-tab>\n    <button clrTabLink>Running</button>\n    <clr-tab-content *clrIfActive>\n      <clr-datagrid>\n        <clr-dg-column>Status</clr-dg-column>\n        <clr-dg-column>Running on</clr-dg-column>\n        <clr-dg-column>Scan Type</clr-dg-column>\n        <clr-dg-column>Message</clr-dg-column>\n        <clr-dg-row *ngFor=\"let msg of messages\">\n          <clr-dg-cell>{{msg.statusDate | date}}</clr-dg-cell>\n          <clr-dg-cell>{{msg.server}}</clr-dg-cell>\n          <clr-dg-cell>{{msg.scanType}}</clr-dg-cell>\n          <clr-dg-cell>{{msg.scanMessage}}</clr-dg-cell>\n        </clr-dg-row>\n        <clr-dg-footer>{{messages.length}} users</clr-dg-footer>\n      </clr-datagrid>\n    </clr-tab-content>\n  </clr-tab>\n</clr-tabs>\n\n\n\n\n","import {Component, HostListener} from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {CustomerQuery} from \"../../../app-state/customer/customer.query\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {ScanWsMessage} from \"../../model/birddog-classes\";\nimport {BirddogMessageService} from \"../../services/birddog-message.service\";\n\n@Component({\n  selector: 'app-birddog-scan-jobs',\n  templateUrl: './birddog-scan-jobs.component.html',\n  styleUrls: ['./birddog-scan-jobs.component.scss']\n})\nexport class BirddogScanJobsComponent {\n\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(event: KeyboardEvent) {\n    this.router.navigateByUrl(\"customer\")\n  }\n\n\n  messages: ScanWsMessage[] = []\n\n  constructor(private router: Router,\n              private http: HttpClient,\n              private customerQuery: CustomerQuery,\n              private ms: BirddogMessageService) {\n    this.ms.messages.subscribe(msg => {\n      this.messages.push(msg)\n    })\n  }\n\n  /**\n   * Display the jobs for the customer\n   */\n  onScanJobSelected(): void {\n    this.router.navigateByUrl('domains')\n  }\n\n  /***\n   * Execute a  scan job for this customer\n   */\n  executeScanJob(): void {\n\n    //TODO: We should not be able to get here\n    //Make sure the active id is set\n    if (this.customerQuery.hasActive()) {\n      this.http.post(\"/api/scan/\", this.customerQuery.getActiveId()).subscribe(result => {\n        console.log(result)\n      })\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {EntityState, EntityStore, StoreConfig} from '@datorama/akita';\nimport {Customer} from './customer.model';\n\nexport interface CustomerState extends EntityState<Customer> {}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({ name: 'Customer' })\nexport class CustomerStore extends EntityStore<CustomerState> {\n\n  constructor() {\n    super();\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {BirddogHomeComponent} from \"./modules/core/home/birddog-home/birddog-home.component\";\nimport {BirddogScanLiveComponent} from \"./modules/core/pages/birddog-scan-live/birddog-scan-live.component\";\nimport {BirddogCustomerComponent} from \"./modules/core/pages/birddog-customer/birddog-customer.component\";\nimport {BirddogScanJobsComponent} from \"./modules/core/pages/birddog-scan-jobs/birddog-scan-jobs.component\";\nimport {BirddogScanDomainsComponent} from \"./modules/core/pages/birddog-scan-domains/birddog-scan-domains.component\";\nimport {BirddogScanHostsComponent} from \"./modules/core/pages/birddog-scan-hosts/birddog-scan-hosts.component\";\nimport {BirddogScanHostPortsComponent} from \"./modules/core/pages/birddog-scan-host-ports/birddog-scan-host-ports.component\";\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BirddogHomeComponent,\n    children: [\n      {\n        path: '',\n        data: {allRoles: false},\n        component: BirddogScanLiveComponent,\n      },\n      {\n        path: 'customer',\n        data: {allRoles: false},\n        component: BirddogCustomerComponent,\n      },\n      {\n        path: 'jobs',\n        data: {allRoles: false},\n        component: BirddogScanJobsComponent,\n      },\n      {\n        path: 'domains',\n        data: {allRoles: false},\n        component: BirddogScanDomainsComponent,\n      },\n      {\n        path: 'hosts',\n        data: {allRoles: false},\n        component: BirddogScanHostsComponent,\n      },\n      {\n        path: 'ports',\n        data: {allRoles: false},\n        component: BirddogScanHostPortsComponent,\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Injectable} from '@angular/core';\nimport {EntityState, EntityStore, StoreConfig} from '@datorama/akita';\nimport {ScanHost} from './scan-host.model';\nimport {ScanHostPortStore} from \"../scan-host-port/scan-host-port.store\";\n\nexport interface ScanHostState extends EntityState<ScanHost> {\n}\n\n@Injectable({providedIn: 'root'})\n@StoreConfig({name: 'ScanHost'})\nexport class ScanHostStore extends EntityStore<ScanHostState> {\n\n  constructor(protected scanHostPortStore: ScanHostPortStore) {\n    super();\n  }\n\n  /**\n   * Clear the store\n   */\n  clear() {\n    this.remove()\n    this.scanHostPortStore.clear()\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {BirddogWsService} from \"./birddog-ws.service\";\nimport {Subject} from \"rxjs\";\nimport {ScanWsMessage} from \"../model/birddog-classes\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BirddogMessageService {\n\n  public messages: Subject<ScanWsMessage> = new Subject<ScanWsMessage>()\n\n  constructor(private ws: BirddogWsService) {\n    ws.connect(\"ws://\" + location.hostname + \":\" + location.port + \"/ws/scan/topic\").subscribe((message: MessageEvent) => {\n      this.messages.next(JSON.parse(message.data) as ScanWsMessage)\n    })\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {QueryEntity} from '@datorama/akita';\nimport {ScanHostState, ScanHostStore} from './scan-host.store';\nimport {ScanHostPortService} from \"../scan-host-port/scan-host-port.service\";\nimport {ScanHost} from \"./scan-host.model\";\n\n@Injectable({ providedIn: 'root' })\nexport class ScanHostQuery extends QueryEntity<ScanHostState> {\n\n  constructor(protected store: ScanHostStore, protected scanHostPortService: ScanHostPortService) {\n    super(store);\n  }\n  /***\n   * Set the active scan job\n   * @param scanJob\n   */\n  setActive(scanHost: ScanHost): void {\n    this.store.setActive(scanHost.id);\n\n    //populate the jobs for the selected customer\n    this.scanHostPortService.populateByScanHostId(scanHost.id).subscribe(response => {\n      console.log(\"scan host store set to scan job = \" + scanHost.id)\n    });\n  }\n}\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}